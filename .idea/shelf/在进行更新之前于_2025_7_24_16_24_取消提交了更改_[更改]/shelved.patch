Index: maps.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json, math\nfrom straight import Straight\nfrom start import Start\nfrom end import End\nfrom impasse import Impasse\nfrom turn import Turn\nfrom three import Three\nfrom four import Four\nfrom floor import Floor\nfrom arrow import Arrow\n\n#map loader and manager\n\nclass Map_Manager:\n    def __init__(self,navigator):\n        self.game=navigator.game\n        self.RW=self.game.REF_WIDTH\n        self.RH=self.game.REF_HEIGHT\n\n        map_files=['map1.json','map2.json','map3.json','map4.json','map5.json']\n        self.map_dicts=[]\n        for file in map_files:\n            with open(file,'r') as f:\n                self.map_dicts.append(json.load(f))\n\n        self.navigator=navigator\n        self.st=0\n        self.moving=False\n        self.press_pos=False\n        self.action=None\n        self.map_sufs=[]\n    \n    def update(self):#st: game.st\n        if not self.navigator.moving and self.navigator.press_pos:\n            self.action=self.judge_action()\n            if self.action==None:\n                self.navigator.press_pos=False\n                return\n            self.navigator.moving=True\n        elif not self.navigator.press_pos:\n            return\n\n        if self.navigator.moving:\n            self.move(self.action,self.map_sufs)\n            self.game.beginning=False\n            self.navigator.ang=self.action\n        if self.map_sufs[0].loc[0]%100 ==0 and (self.map_sufs[0].loc[1]-255)%100==0:\n            self.navigator.press_pos=False\n            self.navigator.moving=False\n    \n    def display(self):#st: game.st\n        for el in self.map_sufs:\n            el.display()\n\n    def get_level_num(self):\n        return 5\n\n    def judge_action(self):\n        ang=self.round_ang()\n        action = None\n        arrow=None\n        for suf in self.map_sufs:\n            if suf.__class__.__name__=='Arrow' and suf.loc in [(590,245),(590,265),(610,245),(610,265),(600,255)] and suf.ang==self.navigator.ang:\n                arrow=suf\n            if suf.loc == (600, 255):\n                if suf.__class__.__name__=='Straight' and abs(suf.ang - ang+90) in [0, 180]:\n                    action = ang\n                elif suf.__class__.__name__=='Impasse' and suf.ang==ang:\n                    action=ang\n                elif suf.__class__.__name__=='Turn' and suf.ang in (ang-180,ang-270,ang+180,ang+90):\n                    action=ang\n                elif suf.__class__.__name__=='Three' and suf.ang not in (ang-90,ang+270):\n                    action=ang\n                elif suf.__class__.__name__=='Four':\n                    action=ang\n                elif suf.__class__.__name__=='Floor' and ang==self.navigator.ang:\n                    action=ang\n        if abs(self.navigator.ang-ang)==180:\n            action=None\n        elif arrow and 'straight' in arrow.type and action!=arrow.ang:\n            action=None\n        elif arrow and 'turn' in arrow.type:\n            if arrow.flip and action not in (arrow.ang+90,arrow.ang-270):\n                action=None\n            elif not arrow.flip and action not in (arrow.ang-90,arrow.ang+270):\n                action=None\n        return action\n\n    def move(self,action,map_sufs):\n        if action==0:\n            for el in map_sufs:\n                el.loc=(el.loc[0]-10,el.loc[1])\n        elif action==90:\n            for el in map_sufs:\n                el.loc=(el.loc[0],el.loc[1]+10)\n        elif action==180:\n            for el in map_sufs:\n                el.loc=(el.loc[0]+10,el.loc[1])\n        else:\n            for el in map_sufs:\n                el.loc=(el.loc[0],el.loc[1]-10)\n\n    def round_ang(self):\n        x, y = self.navigator.press_pos\n        if self.game.w / self.game.h >= 2.19:\n            x,y=x * self.RH / self.game.h,y * self.RH / self.game.h\n        else:\n            x,y=x * self.RW / self.game.w,y * self.RW / self.game.w\n        dx,dy=x-600,255-y\n        if dx == 0:\n            if dy > 0:\n                ang = 90\n            else:\n                ang = -90\n        elif dx > 0:\n            ang = math.degrees(math.atan(dy / dx))\n        else:\n            ang = math.degrees(math.atan(dy / dx)) + 180\n        if ang < 0:\n            ang += 360\n        if 45 <= ang < 135:\n            ang = 90\n        elif 135 <= ang < 225:\n            ang = 180\n        elif 225 <= ang < 315:\n            ang = 270\n        else:\n            ang = 0\n        return ang\n\n    def load_map(self,ind):\n        map_dict=self.map_dicts[ind]\n        self.map_sufs=[]\n        if 'straight' in map_dict.keys():\n            for attr in map_dict['straight']:\n                straight = Straight(self.game)\n                straight.loc = (attr[0], attr[1])### 0: loc[0], 1: loc[1], 2: ang(, 3: type)\n                straight.ang = attr[2]\n                self.map_sufs.append(straight)\n\n        if 'impasse' in map_dict.keys():\n            for attr in map_dict['impasse']:\n                impasse = Impasse(self.game)\n                impasse.loc = (attr[0], attr[1])\n                impasse.ang = attr[2]\n                self.map_sufs.append(impasse)\n\n        if 'turn' in map_dict.keys():\n            for attr in map_dict['turn']:\n                turn = Turn(self.game)\n                turn.loc = (attr[0], attr[1])\n                turn.ang = attr[2]\n                self.map_sufs.append(turn)\n\n        if 'three' in map_dict.keys():\n            for attr in map_dict['three']:\n                three = Three(self.game)\n                three.loc = (attr[0], attr[1])\n                three.ang = attr[2]\n                self.map_sufs.append(three)\n\n        if 'four' in map_dict.keys():\n            for attr in map_dict['four']:\n                four = Four(self.game)\n                four.loc = (attr[0], attr[1])\n                four.ang = attr[2]\n                self.map_sufs.append(four)\n\n        if 'floor' in map_dict.keys():\n            for attr in map_dict['floor']:\n                floor=Floor(self.game)\n                floor.loc= (attr[0], attr[1])\n                floor.ang = attr[2]\n                self.map_sufs.append(floor)\n\n        if 'arrow' in map_dict.keys():\n            for attr in map_dict['arrow']:\n                arrow=Arrow(self.game,attr[3:])\n                arrow.loc=(attr[0],attr[1])\n                arrow.ang=attr[2]\n                self.map_sufs.append(arrow)\n\n        start = Start(self.game)\n        start.loc = (map_dict['start'][0], map_dict['start'][1])\n        start.ang = 0\n        self.map_sufs.append(start)\n\n        end = End(self.game)\n        end.loc = (map_dict['end'][0], map_dict['end'][1])\n        end.ang = 0\n        self.map_sufs.append(end)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/maps.py b/maps.py
--- a/maps.py	(revision c15b21fb89ccb275c8e46d098170b5c6dd6db2b8)
+++ b/maps.py	(date 1753345382209)
@@ -33,7 +33,7 @@
     def update(self):#st: game.st
         if not self.navigator.moving and self.navigator.press_pos:
             self.action=self.judge_action()
-            if self.action==None:
+            if self.action is None:
                 self.navigator.press_pos=False
                 return
             self.navigator.moving=True
